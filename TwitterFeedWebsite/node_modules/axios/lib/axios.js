import { extend } from '.utils';
import bind from '.helpers/bind';
import Axios, { prototype } from '.core/Axios';
import mergeConfig from '.core/mergeConfig';
import defaults from '.defaults';

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(prototype.request, context);

  // Copy axios.prototype to instance
  extend(instance, prototype, context);

  // Copy context to instance
  extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = require('./cancel/Cancel');
axios.CancelToken = require('./cancel/CancelToken');
axios.isCancel = require('./cancel/isCancel');

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = require('./helpers/spread');


// Allow use of default import syntax in TypeScript
const _default = axios;
export { _default as default };
